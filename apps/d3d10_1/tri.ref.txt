CreateDXGIFactory1(riid = IID_IDXGIFactory1, ppFactory = &<pFactory>) = S_OK
IDXGIFactory1::EnumAdapters(this = <pFactory>, Adapter = 0, ppAdapter = &<pAdapter>) = S_OK
D3D10CreateDevice1(pAdapter = <pAdapter>, DriverType = D3D10_DRIVER_TYPE_HARDWARE, Software = NULL, Flags = <>, HardwareLevel = D3D10_FEATURE_LEVEL_10_0, SDKVersion = 32, ppDevice = &<pDevice>) = S_OK
IDXGIFactory1::CreateSwapChain(this = <pFactory>, pDevice = <pDevice>, pDesc = &{BufferDesc = {Width = 250, Height = 250, RefreshRate = {Numerator = 60, Denominator = 1}, Format = DXGI_FORMAT_R8G8B8A8_UNORM, ScanlineOrdering = DXGI_MODE_SCANLINE_ORDER_UNSPECIFIED, Scaling = DXGI_MODE_SCALING_UNSPECIFIED}, SampleDesc = {Count = 1, Quality = 0}, BufferUsage = DXGI_USAGE_RENDER_TARGET_OUTPUT, BufferCount = 2, OutputWindow = <hWnd>, Windowed = TRUE, SwapEffect = DXGI_SWAP_EFFECT_DISCARD, Flags = 0x0}, ppSwapChain = &<pSwapChain>) = S_OK
IDXGISwapChain::GetBuffer(this = <pSwapChain>, Buffer = 0, riid = IID_ID3D10Texture2D, ppSurface = &<pSurface>) = S_OK
ID3D10Device1::CreateRenderTargetView(this = <pDevice>, pResource = <pSurface>, pDesc = &{Format = DXGI_FORMAT_R8G8B8A8_UNORM, ViewDimension = D3D10_RTV_DIMENSION_TEXTURE2D, Texture2D = {MipSlice = 0}}, ppRTView = &<pRenderTargetView>) = S_OK
ID3D10Device1::OMSetRenderTargets(this = <pDevice>, NumViews = 1, ppRenderTargetViews = &<pRenderTargetView>, pDepthStencilView = NULL)
ID3D10Device1::ClearRenderTargetView(this = <pDevice>, pRenderTargetView = <pRenderTargetView>, ColorRGBA = {0.3, 0.1, 0.3, 1})
ID3D10Device1::CreateVertexShader(this = <pDevice>, pShaderBytecode = "//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
//
vs_4_0
dcl_input v0.xyzw
dcl_input v1.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
mov o0.xyzw, v0.xyzw
mov o1.xyzw, v1.xyzw
ret 
// Approximately 0 instruction slots used
", BytecodeLength = 320, ppVertexShader = &<pVertexShader>) = S_OK
ID3D10Device1::CreateInputLayout(this = <pDevice>, pInputElementDescs = {{SemanticName = "POSITION", SemanticIndex = 0, Format = DXGI_FORMAT_R32G32B32A32_FLOAT, InputSlot = 0, AlignedByteOffset = 0, InputSlotClass = D3D10_INPUT_PER_VERTEX_DATA, InstanceDataStepRate = 0}, {SemanticName = "COLOR", SemanticIndex = 0, Format = DXGI_FORMAT_R32G32B32A32_FLOAT, InputSlot = 0, AlignedByteOffset = 16, InputSlotClass = D3D10_INPUT_PER_VERTEX_DATA, InstanceDataStepRate = 0}}, NumElements = 2, pShaderBytecodeWithInputSignature = "//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
//
vs_4_0
dcl_input v0.xyzw
dcl_input v1.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
mov o0.xyzw, v0.xyzw
mov o1.xyzw, v1.xyzw
ret 
// Approximately 0 instruction slots used
", BytecodeLength = 320, ppInputLayout = &<pInputLayout>) = S_OK
ID3D10Device1::IASetInputLayout(this = <pDevice>, pInputLayout = <pInputLayout>)
ID3D10Device1::CreatePixelShader(this = <pDevice>, pShaderBytecode = "//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// COLOR                    0   xyzw        1     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_input_ps linear v1.xyzw
dcl_output o0.xyzw
mov o0.xyzw, v1.xyzw
ret 
// Approximately 0 instruction slots used
", BytecodeLength = 244, ppPixelShader = &<pPixelShader>) = S_OK
ID3D10Device1::VSSetShader(this = <pDevice>, pVertexShader = <pVertexShader>)
ID3D10Device1::PSSetShader(this = <pDevice>, pPixelShader = <pPixelShader>)
ID3D10Device1::CreateBuffer(this = <pDevice>, pDesc = &{ByteWidth = 96, Usage = D3D10_USAGE_DYNAMIC, BindFlags = D3D10_BIND_VERTEX_BUFFER, CPUAccessFlags = D3D10_CPU_ACCESS_WRITE, MiscFlags = 0x0}, pInitialData = NULL, ppBuffer = &<pVertexBuffer>) = S_OK
ID3D10Buffer::Map(this = <pVertexBuffer>, MapType = D3D10_MAP_WRITE_DISCARD, MapFlags = 0x0, ppData = &<pMap>) = S_OK
memcpy(dest = <pMap>, src = blob(96), n = 96)
ID3D10Buffer::Unmap(this = <pVertexBuffer>)
ID3D10Device1::IASetVertexBuffers(this = <pDevice>, StartSlot = 0, NumBuffers = 1, ppVertexBuffers = &<pVertexBuffer>, pStrides = &32, pOffsets = &0)
ID3D10Device1::RSSetViewports(this = <pDevice>, NumViewports = 1, pViewports = &{TopLeftX = 0, TopLeftY = 0, Width = 250, Height = 250, MinDepth = 0, MaxDepth = 1})
ID3D10Device1::CreateRasterizerState(this = <pDevice>, pRasterizerDesc = &{FillMode = D3D10_FILL_SOLID, CullMode = D3D10_CULL_NONE, FrontCounterClockwise = TRUE, DepthBias = 0, DepthBiasClamp = 0, SlopeScaledDepthBias = 0, DepthClipEnable = TRUE, ScissorEnable = FALSE, MultisampleEnable = FALSE, AntialiasedLineEnable = FALSE}, ppRasterizerState = &<pRasterizerState>) = S_OK
ID3D10Device1::RSSetState(this = <pDevice>, pRasterizerState = <pRasterizerState>)
ID3D10Device1::IASetPrimitiveTopology(this = <pDevice>, Topology = D3D10_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP)
ID3D10Device1::Draw(this = <pDevice>, VertexCount = 3, StartVertexLocation = 0)
<present> IDXGISwapChain::Present(this = <pSwapChain>, SyncInterval = 0, Flags = 0x0) = <>
ID3D10Device1::IASetVertexBuffers(this = <pDevice>, StartSlot = 0, NumBuffers = 1, ppVertexBuffers = &NULL, pStrides = &0, pOffsets = &0)
ID3D10Device1::OMSetRenderTargets(this = <pDevice>, NumViews = 0, ppRenderTargetViews = NULL, pDepthStencilView = NULL)
ID3D10Device1::IASetInputLayout(this = <pDevice>, pInputLayout = NULL)
ID3D10Device1::VSSetShader(this = <pDevice>, pVertexShader = NULL)
ID3D10Device1::PSSetShader(this = <pDevice>, pPixelShader = NULL)
ID3D10Device1::RSSetState(this = <pDevice>, pRasterizerState = NULL)
ID3D10RasterizerState::Release(this = <pRasterizerState>) = 0
ID3D10Buffer::Release(this = <pVertexBuffer>) = 0
ID3D10PixelShader::Release(this = <pPixelShader>) = 0
ID3D10InputLayout::Release(this = <pInputLayout>) = 0
ID3D10VertexShader::Release(this = <pVertexShader>) = 0
ID3D10RenderTargetView::Release(this = <pRenderTargetView>) = 0
ID3D10Texture2D::Release(this = <pSurface>) = 0
IDXGISwapChain::Release(this = <pSwapChain>) = 0
ID3D10Device1::Release(this = <pDevice>) = 0
IDXGIAdapter::Release(this = <pAdapter>) = 0
IDXGIFactory1::Release(this = <pFactory>) = 0
